# -*- coding: utf-8 -*-
"""ManualTest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Liia2OBgiL5rQ6YwbJcbfvjjn2bt8Q6q
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/content/drive')

# %cd '/content/drive/MyDrive/YTScoringDataSet/CSV Databases/'
#!ls
folderPath = '/content/drive/MyDrive/YTScoringDataSet/CSV Databases/'

import requests
from PIL import Image
from io import BytesIO
import torchvision.transforms as transforms
from torchvision.models import resnet50
import torch

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(device)

# Load the model and its weights
model = resnet50(pretrained=False)
num_classes = 10
model.fc = torch.nn.Linear(in_features=2048, out_features=num_classes)
model.load_state_dict(torch.load("model_weights_multi_guess_Resnet50.pth"))
model = model.to(device)
model.eval()  # Set the model to evaluation mode

def load_and_preprocess_image(url, img_size=300):
    response = requests.get(url)
    img = Image.open(BytesIO(response.content)).convert("RGB")
    transform = transforms.Compose([
        transforms.Resize(img_size),
        transforms.CenterCrop(img_size),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ])
    return transform(img).unsqueeze(0)

# Define a function to get top k predictions
def get_top_k_predictions(model, image_tensor, k):
    with torch.no_grad():
        image_tensor = image_tensor.to(device)
        output = model(image_tensor)
        _, top_k_preds = torch.topk(output, k)
        return top_k_preds.squeeze().tolist()

# Replace with your thumbnail URL
thumbnail_url = "https://i.ytimg.com/vi/8Cv3e2tVYls/hqdefault.jpg"

# Load and preprocess the image
image_tensor = load_and_preprocess_image(thumbnail_url)

# Get the top 3 predictions
top_3_preds = get_top_k_predictions(model, image_tensor, 3)
print(f"Top 3 predictions: {top_3_preds}")

from PIL import Image
import torchvision.transforms as transforms

# Define a function to load and preprocess the image
def load_and_preprocess_image(filepath, img_size=300, crop_ratio=0.1):
    img = Image.open(filepath).convert("RGB")
    
    # Remove black bars from the top and bottom
    width, height = img.size
    top = int(height * crop_ratio)
    bottom = int(height * (1 - crop_ratio))
    img = img.crop((0, top, width, bottom))

    transform = transforms.Compose([
        transforms.Resize(img_size),
        transforms.CenterCrop(img_size),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ])
    img_transformed = transform(img)
    return img_transformed.unsqueeze(0), img

# (Keep the same code for loading the model and its weights,
#  setting it to evaluation mode, and defining the get_top_k_predictions function)

# Replace with your local image file path or URL
image_file_path = "https://i.ytimg.com/vi/1C-s82S3XPA/hqdefault.jpg"

# Load and preprocess the image
image_tensor, original_image = load_and_preprocess_image(image_file_path)

# Display the transformed image
original_image.show()

# Get the top 3 predictions
top_3_preds = get_top_k_predictions(model, image_tensor, 3)
print(f"Top 3 predictions: {top_3_preds}")